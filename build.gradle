import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerTagImage

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.bmuschko:gradle-docker-plugin:3.3.5'
        classpath 'com.tkruse.gradle:gradle-groovysh-plugin:1.0.7'
        gradleApi()
    }
}

repositories {
    mavenCentral()
    jcenter()
}

apply plugin: 'com.bmuschko.docker-remote-api'
apply plugin: 'com.github.tkruse.groovysh'
apply plugin: 'maven-publish'
apply plugin: 'publishing'

apply from: "$rootDir/gradle/python.gradle"
apply from: "$rootDir/gradle/idea.gradle"

/*****************
 * Set project details
 */

description = 'fiaas-deploy-daemon'
group = 'no.finntech'
version = getDate()

/*****************
 * Docker tasks
 */

docker {
    if (System.env.DOCKER_HOST) {
        url = "$System.env.DOCKER_HOST".replace("tcp", "https")
        if (System.env.DOCKER_CERT_PATH) {
            certPath = new File(System.env.DOCKER_CERT_PATH)
        }
    } else {
        url = 'unix:///var/run/docker.sock'
    }
}

def image_name = "fiaas/${project.description}"
def version_string = "${project.version}-${getGitHash()}"
def image_tag = "${image_name}:${version_string}"

task bakeImage(type: DockerBuildImage) {
    description 'Build docker image'
    dependsOn build
    inputs.file 'Dockerfile'
    inputs.files build.outputs
    inputDir projectDir
    tag image_tag
}

task tagLatestImage(type: DockerTagImage) {
    dependsOn bakeImage
    force = true
    repository image_name
    targetImageId { bakeImage.getImageId() }
    tag "latest"
}
integrationTest.dependsOn tagLatestImage

// Ideally we would use DockerPushImage here, but it doesn't support reading the docker config,
// or even authenticating with a token. So, we have to fall back to executing the docker client.
task publishImage(type: Exec) {
    description 'Publish docker image to docker registry'
    group 'publishing'
    dependsOn bakeImage
    executable = 'docker'
    args = ['push', image_tag]
    doLast {
        logger.lifecycle("Pushed image ${image_tag}")
    }
}
task publishLatestImage(type: Exec) {
    description 'Publish "latest" docker image to docker registry'
    group 'publishing'
    dependsOn tagLatestImage
    executable = 'docker'
    args = ['push', "${image_name}:latest"]
    doLast {
        logger.lifecycle("Pushed image ${image_name}:latest")
    }
}
publish.dependsOn(publishImage)
publish.dependsOn(publishLatestImage)

/*****************
 * Distribute fiaas.yml artifact
 */

def fiaas_artifact_url = "${System.env.S3_BUCKET_URL}/artifacts/${version_string}/fiaas.yml"
def fiaas_artifact_url_public = "http://fiaas-release.delivery-pro.schibsted.io/artifacts/${version_string}/fiaas.yml"

task publishFiaasYmlArtifact(type: Exec) {
    description 'Publish fiaas.yml file to s3'
    group 'publishing'
    executable "/bin/sh"
    args "-c", "curl --user-agent ${System.env.S3_BUCKET_USERNAME} --referer ${System.env.S3_BUCKET_PASSWORD} --upload-file fiaas.yml --request PUT ${fiaas_artifact_url}"
    doLast {
        logger.lifecycle("Uploaded paas-app-config: ${fiaas_artifact_url_public}")
    }
}

publish.dependsOn(publishFiaasYmlArtifact)

/*****************
 * Misc tasks
 */

task clean(type: Delete) {
    delete fileTree(dir: '.', include: '**/*.pyc')
    delete build.outputs
    delete test.outputs
}


task wrapper(type: Wrapper) {
    gradleVersion = '3.1'
}

/*****************
 * Helpers
 */

def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMddHHmmss')
    return formattedDate
}

def getGitHash() {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}
